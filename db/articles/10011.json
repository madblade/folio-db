{"title":"Gerstner waves in WebGL","date":"2020/05/06","author":"M. S","thumb":"assets/img/craft/gerstner-2.jpg","body":[{"type":4,"content":"assets/img/craft/gerstner-1.jpg"},{"type":4,"content":"assets/img/craft/gerstner-2.jpg"},{"type":2,"content":"Ocean rendering has been done in WebGL for a while (see this <a href=\"https://www.shadertoy.com/view/Ms2SD1\">shadertoy</a>, and the <i>webgl_shaders_ocean2</i> ThreeJS example that was already using FFTs without compute shaders). These examples are impressive but they rely entirely on fragment processing. The Gerstner approach documented in <a href=\"https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-1-effective-water-simulation-physical-models\">GPU Gems 1</a> is geometry-oriented; it is more suitable in a number of scenarios, as it puts less strain on the GPU and is more model-friendly, e.g. to synchronize ship position and pitch-roll-yaw. "},{"type":2,"content":"<a href=\"https://madblade.github.io/waves-gerstner/\">Demo</a>"},{"type":2,"content":"<a href=\"https://github.com/madblade/waves-gerstner/\">Source code</a>"}],"type":"craft","id":10011}