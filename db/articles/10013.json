{"title":"Painterly rendering in WebGL","date":"2021/01/06","author":"M. S","thumb":"assets/img/craft/painterly-1.jpg","body":[{"type":4,"content":"assets/img/craft/painterly-1.jpg"},{"type":4,"content":"assets/img/craft/painterly-2.jpg"},{"type":2,"content":"Barbara Meier proposed in her Disney paper, <a href=\"https://disneyanimation.com/publications/painterly-rendering-for-animation/\">Painterly Rendering for Animation</a>, to use particles instead of triangles to render brush strokes. Since then, many similar approaches have been proposed to tackle the (challenging) problem of placing and orienting those particle-brushes while keeping temporal coherence. "},{"type":2,"content":"In this demo, information from the depth buffer and object UV coordinates is used to compute particle sizes, colors and orientations. The method is not robust temporally, with obvious instances of the “shower-door” effect (see the interesting paper: <a href=\"https://www-sop.inria.fr/reves/Basilic/2011/BBT11/paper.pdf\">Temporal Coherence for Stylized Animations</a>)."},{"type":2,"content":"<a href=\"https://madblade.github.io/brush-renderer/\">Demo</a>"},{"type":2,"content":"<a href=\"https://github.com/madblade/brush-renderer/\">Source code</a>"}],"type":"craft","id":10013}